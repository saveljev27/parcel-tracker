generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shipments     Shipment[] @relation("UserShipments")
  shipmentsIds  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

model Shipment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String? @db.ObjectId
  user            User? @relation("UserShipments", fields: [userId], references: [id], onDelete: Cascade)
  carrier         String   
  balticCountry   String?
  delivery        String   
  pickupAddress   String?   
  receiverName    String   
  receiverPhone   String  
  sendAddress     String  
  senderEmail     String 
  senderName      String   
  senderPhone     String   
  shipmentSize    String  
  totalPrice      Float
  payStatus       Boolean
  
  createdAt       DateTime @default(now())  
  updatedAt       DateTime @updatedAt   
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

 
